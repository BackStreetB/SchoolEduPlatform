# Script restore d·ªØ li·ªáu l√™n VPS sau khi deploy
# S·ª≠ d·ª•ng: .\restore-on-vps.ps1 -BackupPath "path\to\backup\folder"

param(
    [Parameter(Mandatory=$true)]
    [string]$BackupPath,
    [string]$VPS_IP = "222.255.214.154",
    [string]$VPS_USER = "root",
    [string]$VPS_PASSWORD = "V6eUxFkPGGJXhKlrj0JM",
    [int]$VPS_PORT = 22
)

Write-Host "üîÑ B·∫Øt ƒë·∫ßu restore d·ªØ li·ªáu l√™n VPS..." -ForegroundColor Green
Write-Host "üìÅ Backup path: $BackupPath" -ForegroundColor Cyan
Write-Host "üìç VPS: $VPS_IP" -ForegroundColor Cyan

# Ki·ªÉm tra backup path
if (-not (Test-Path $BackupPath)) {
    Write-Host "‚ùå Backup path kh√¥ng t·ªìn t·∫°i: $BackupPath" -ForegroundColor Red
    exit 1
}

# Ki·ªÉm tra k·∫øt n·ªëi SSH
Write-Host "`nüîç Ki·ªÉm tra k·∫øt n·ªëi SSH..." -ForegroundColor Yellow
try {
    $sshTest = ssh -o ConnectTimeout=10 -o BatchMode=yes -p $VPS_PORT $VPS_USER@$VPS_IP "echo 'SSH connection successful'"
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ K·∫øt n·ªëi SSH th√†nh c√¥ng!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå K·∫øt n·ªëi SSH th·∫•t b·∫°i!" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi SSH: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

$remoteDir = "/opt/school-platform"

# Ki·ªÉm tra xem h·ªá th·ªëng c√≥ ƒëang ch·∫°y kh√¥ng
Write-Host "`nüîç Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng tr√™n VPS..." -ForegroundColor Yellow
$systemStatus = ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && docker-compose ps --format 'table {{.Name}}\t{{.Status}}\t{{.Ports}}'"

if ($systemStatus -match "school_postgres.*Up") {
    Write-Host "‚úÖ PostgreSQL ƒëang ch·∫°y tr√™n VPS" -ForegroundColor Green
} else {
    Write-Host "‚ùå PostgreSQL kh√¥ng ch·∫°y tr√™n VPS. H√£y kh·ªüi ƒë·ªông h·ªá th·ªëng tr∆∞·ªõc!" -ForegroundColor Red
    Write-Host "Ch·∫°y: ssh -p $VPS_PORT $VPS_USER@$VPS_IP 'cd $remoteDir && ./start.sh'" -ForegroundColor Yellow
    exit 1
}

# T·∫°o th∆∞ m·ª•c restore tr√™n VPS
Write-Host "`nüìÅ T·∫°o th∆∞ m·ª•c restore tr√™n VPS..." -ForegroundColor Yellow
ssh -p $VPS_PORT $VPS_USER@$VPS_IP "mkdir -p $remoteDir/restore"

# Copy backup l√™n VPS
Write-Host "`nüì§ Copy backup l√™n VPS..." -ForegroundColor Yellow
$backupName = Split-Path $BackupPath -Leaf
scp -r -P $VPS_PORT $BackupPath "$VPS_USER@$VPS_IP:$remoteDir/restore/"

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Copy backup th√†nh c√¥ng!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Copy backup th·∫•t b·∫°i!" -ForegroundColor Red
    exit 1
}

# Restore databases
Write-Host "`nüóÑÔ∏è Restore databases..." -ForegroundColor Yellow
$dbBackupFiles = Get-ChildItem $BackupPath -Filter "*.sql"

foreach ($dbFile in $dbBackupFiles) {
    $fileName = $dbFile.Name
    Write-Host "Restore database: $fileName" -ForegroundColor Cyan
    
    # Copy file SQL l√™n VPS
    scp -P $VPS_PORT $dbFile.FullName "$VPS_USER@$VPS_IP:$remoteDir/restore/"
    
    # Restore database
    if ($fileName -match "full_backup") {
        Write-Host "Restore full backup..." -ForegroundColor Yellow
        ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && cat restore/$fileName | docker exec -i school_postgres psql -U postgres"
    } else {
        # X√°c ƒë·ªãnh database name t·ª´ t√™n file
        $dbName = $fileName -replace "_.*\.sql$", ""
        Write-Host "Restore database: $dbName" -ForegroundColor Yellow
        
        # T·∫°o database n·∫øu ch∆∞a c√≥
        ssh -p $VPS_PORT $VPS_USER@$VPS_IP "docker exec -i school_postgres psql -U postgres -c 'CREATE DATABASE $($dbName);' 2>/dev/null || true"
        
        # Restore database
        ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && cat restore/$fileName | docker exec -i school_postgres psql -U postgres -d $($dbName)"
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Restore $fileName th√†nh c√¥ng!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Restore $fileName th·∫•t b·∫°i!" -ForegroundColor Red
    }
}

# Restore uploads
Write-Host "`nüìÅ Restore uploads..." -ForegroundColor Yellow
$uploadBackupDir = Join-Path $BackupPath "uploads"
if (Test-Path $uploadBackupDir) {
    $uploadDirs = Get-ChildItem $uploadBackupDir -Directory
    
    foreach ($uploadDir in $uploadDirs) {
        $serviceName = $uploadDir.Name
        Write-Host "Restore uploads cho $serviceName..." -ForegroundColor Cyan
        
        # Copy uploads l√™n VPS
        scp -r -P $VPS_PORT $uploadDir.FullName "$VPS_USER@$VPS_IP:$remoteDir/restore/"
        
        # Restore uploads v√†o container
        $containerName = "school_$($serviceName)_service"
        ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && docker cp restore/$serviceName/. $containerName:/app/uploads/"
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Restore uploads $serviceName th√†nh c√¥ng!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Restore uploads $serviceName th·∫•t b·∫°i!" -ForegroundColor Red
        }
    }
} else {
    Write-Host "‚ö†Ô∏è Kh√¥ng c√≥ th∆∞ m·ª•c uploads ƒë·ªÉ restore" -ForegroundColor Yellow
}

# Restore configuration files (n·∫øu c·∫ßn)
Write-Host "`n‚öôÔ∏è Restore configuration files..." -ForegroundColor Yellow
$configBackupDir = Join-Path $BackupPath "config"
if (Test-Path $configBackupDir) {
    $configFiles = Get-ChildItem $configBackupDir -File
    
    foreach ($configFile in $configFiles) {
        $fileName = $configFile.Name
        Write-Host "Restore config: $fileName" -ForegroundColor Cyan
        
        # Copy config file l√™n VPS
        scp -P $VPS_PORT $configFile.FullName "$VPS_USER@$VPS_IP:$remoteDir/restore/"
        
        # Restore config file (ch·ªâ restore c√°c file .env n·∫øu c·∫ßn)
        if ($fileName -match "\.env$") {
            Write-Host "‚ö†Ô∏è File .env ƒë∆∞·ª£c gi·ªØ nguy√™n ƒë·ªÉ tr√°nh ghi ƒë√® c·∫•u h√¨nh production" -ForegroundColor Yellow
        } else {
            ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && cp restore/$fileName config/"
            Write-Host "‚úÖ Restore config $fileName th√†nh c√¥ng!" -ForegroundColor Green
        }
    }
} else {
    Write-Host "‚ö†Ô∏è Kh√¥ng c√≥ th∆∞ m·ª•c config ƒë·ªÉ restore" -ForegroundColor Yellow
}

# Restart services ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi
Write-Host "`nüîÑ Restart services..." -ForegroundColor Yellow
ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && docker-compose restart"

# Ki·ªÉm tra tr·∫°ng th√°i sau restore
Write-Host "`nüîç Ki·ªÉm tra tr·∫°ng th√°i sau restore..." -ForegroundColor Yellow
ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && docker-compose ps"

# D·ªçn d·∫πp
Write-Host "`nüßπ D·ªçn d·∫πp..." -ForegroundColor Yellow
ssh -p $VPS_PORT $VPS_USER@$VPS_IP "cd $remoteDir && rm -rf restore"

Write-Host "`nüéâ Restore ho√†n th√†nh!" -ForegroundColor Green
Write-Host "`nüìã T·ªïng k·∫øt restore:" -ForegroundColor Yellow
Write-Host "Databases: $($dbBackupFiles.Count) files" -ForegroundColor White

if (Test-Path $uploadBackupDir) {
    $uploadDirs = Get-ChildItem $uploadBackupDir -Directory
    Write-Host "Uploads: $($uploadDirs.Count) services" -ForegroundColor White
}

if (Test-Path $configBackupDir) {
    $configFiles = Get-ChildItem $configBackupDir -File
    Write-Host "Configs: $($configFiles.Count) files" -ForegroundColor White
}

Write-Host "`nüåê Ki·ªÉm tra h·ªá th·ªëng:" -ForegroundColor Yellow
Write-Host "Frontend: https://$VPS_IP" -ForegroundColor White
Write-Host "API Status: ssh -p $VPS_PORT $VPS_USER@$VPS_IP 'cd $remoteDir && docker-compose ps'" -ForegroundColor White

Write-Host "`n‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c restore th√†nh c√¥ng l√™n VPS!" -ForegroundColor Green 