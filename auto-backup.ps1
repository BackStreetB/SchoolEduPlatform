# Auto backup script for School Platform
# Ch·∫°y script n√†y h√†ng ng√†y ƒë·ªÉ backup d·ªØ li·ªáu

param(
    [string]$BackupType = "daily"
)

$ErrorActionPreference = "Stop"
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$backupDir = "backups"

Write-Host "üîÑ B·∫Øt ƒë·∫ßu backup t·ª± ƒë·ªông l√∫c $(Get-Date)" -ForegroundColor Green

# T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
if (!(Test-Path $backupDir)) {
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
}

try {
    # 1. Backup database
    Write-Host "üìä Backup database..." -ForegroundColor Yellow
    $dbBackupFile = "$backupDir/database_backup_$timestamp.sql"
    docker exec school_postgres pg_dumpall -U postgres > $dbBackupFile
    
    if (Test-Path $dbBackupFile -and (Get-Item $dbBackupFile).Length -gt 1KB) {
        Write-Host "‚úÖ Database backup th√†nh c√¥ng: $dbBackupFile" -ForegroundColor Green
    } else {
        throw "Database backup failed ho·∫∑c file qu√° nh·ªè"
    }
    
    # 2. Backup uploads (n·∫øu c√≥)
    $communityUploadsFile = "$backupDir/community_uploads_$timestamp.tar"
    $teacherUploadsFile = "$backupDir/teacher_uploads_$timestamp.tar"
    
    # Community uploads
    try {
        docker exec school_community_service test -d /app/uploads 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "üìÅ Backup community uploads..." -ForegroundColor Yellow
            docker exec school_community_service tar -cf /tmp/community_uploads.tar -C /app uploads/ 2>$null
            docker cp school_community_service:/tmp/community_uploads.tar $communityUploadsFile 2>$null
            Write-Host "‚úÖ Community uploads backup th√†nh c√¥ng" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è Community uploads kh√¥ng c√≥ ho·∫∑c l·ªói" -ForegroundColor Yellow
    }
    
    # Teacher uploads  
    try {
        docker exec school_teacher_service test -d /app/uploads 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "üìÅ Backup teacher uploads..." -ForegroundColor Yellow
            docker exec school_teacher_service tar -cf /tmp/teacher_uploads.tar -C /app uploads/ 2>$null
            docker cp school_teacher_service:/tmp/teacher_uploads.tar $teacherUploadsFile 2>$null
            Write-Host "‚úÖ Teacher uploads backup th√†nh c√¥ng" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è Teacher uploads kh√¥ng c√≥ ho·∫∑c l·ªói" -ForegroundColor Yellow
    }
    
    # 3. T·∫°o complete backup archive
    Write-Host "üì¶ T·∫°o complete backup archive..." -ForegroundColor Yellow
    $completeBackupFile = "$backupDir/complete_backup_$timestamp.tar.gz"
    
    # S·ª≠ d·ª•ng 7zip ƒë·ªÉ t·∫°o archive (n·∫øu c√≥)
    if (Get-Command "7z" -ErrorAction SilentlyContinue) {
        $filesToCompress = @($dbBackupFile)
        if (Test-Path $communityUploadsFile) { $filesToCompress += $communityUploadsFile }
        if (Test-Path $teacherUploadsFile) { $filesToCompress += $teacherUploadsFile }
        
        7z a $completeBackupFile $filesToCompress | Out-Null
        
        # X√≥a c√°c file backup ri√™ng l·∫ª
        Remove-Item $dbBackupFile -Force
        if (Test-Path $communityUploadsFile) { Remove-Item $communityUploadsFile -Force }
        if (Test-Path $teacherUploadsFile) { Remove-Item $teacherUploadsFile -Force }
        
        Write-Host "‚úÖ Complete backup th√†nh c√¥ng: $completeBackupFile" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è 7zip kh√¥ng c√≥, gi·ªØ nguy√™n file database backup: $dbBackupFile" -ForegroundColor Yellow
    }
    
    # 4. D·ªçn d·∫πp backup c≈© (gi·ªØ l·∫°i 7 ng√†y g·∫ßn nh·∫•t)
    Write-Host "üßπ D·ªçn d·∫πp backup c≈©..." -ForegroundColor Yellow
    $oldBackups = Get-ChildItem "$backupDir/database_backup_*.sql", "$backupDir/complete_backup_*.tar.gz" | 
                  Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) }
    
    foreach ($oldBackup in $oldBackups) {
        Remove-Item $oldBackup.FullName -Force
        Write-Host "üóëÔ∏è ƒê√£ x√≥a backup c≈©: $($oldBackup.Name)" -ForegroundColor Cyan
    }
    
    Write-Host "üéâ Backup ho√†n th√†nh th√†nh c√¥ng!" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå L·ªói backup: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
